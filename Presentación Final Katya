{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Presentacion Intermedia\n",
    "### Katya Sosa A01177329"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "1. www.mybinder.org\n",
    "2. www.kaggle.com\n",
    "3. www.jupyter.org/try\n",
    "4. `github jobish` https://mybinder.org/v2/gh/jobish03/jobish03-Visualizacion_de_datos_para_la_toma_de_decisiones/main?filepath=welcome_binder.ipynb\n",
    "\n",
    "Los paquetes hay que incluir en el archivo `requirements.txt`"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /srv/conda/envs/notebook/lib/python3.7/site-packages (0.11.2)\n",
      "Requirement already satisfied: scipy>=1.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.4.1)\n",
      "Requirement already satisfied: pandas>=0.23 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.0.4)\n",
      "Requirement already satisfied: numpy>=1.15 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.18.5)\n",
      "Requirement already satisfied: matplotlib>=2.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (3.2.1)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (1.2.0)\n",
      "Requirement already satisfied: cycler>=0.10 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (0.10.0)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.4.7)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.8.1)\n",
      "Requirement already satisfied: pytz>=2017.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from pandas>=0.23->seaborn) (2020.1)\n",
      "Requirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.7/site-packages (from cycler>=0.10->matplotlib>=2.2->seaborn) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Se abren las librerias que se van a utilizar"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción de Datos\n",
    "Se utiliza la base de datos AtletasOlimpiadas2016 y la información que se muestra en la base de datos representa las características de los Atletas Olímpicos que fueron a las Olimpiadas de “Río de Janeiro” en el 2016."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Team</th>\n",
       "      <th>NOC</th>\n",
       "      <th>Games</th>\n",
       "      <th>Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>City</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Event</th>\n",
       "      <th>Medal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Andreea Aanei</td>\n",
       "      <td>F</td>\n",
       "      <td>22</td>\n",
       "      <td>170.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>Romania</td>\n",
       "      <td>ROU</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Weightlifting</td>\n",
       "      <td>Weightlifting Women's Super-Heavyweight</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Individual All-Around</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Floor Exercise</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Parallel Bars</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Horizontal Bar</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13683</th>\n",
       "      <td>13684</td>\n",
       "      <td>Marc Zwiebler</td>\n",
       "      <td>M</td>\n",
       "      <td>32</td>\n",
       "      <td>181.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>GER</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Badminton</td>\n",
       "      <td>Badminton Men's Singles</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13684</th>\n",
       "      <td>13685</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 100 metres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13685</th>\n",
       "      <td>13686</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 200 metres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13686</th>\n",
       "      <td>13687</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 4 x 100 metres Relay</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13687</th>\n",
       "      <td>13688</td>\n",
       "      <td>Olga Igorevna Zyuzkova</td>\n",
       "      <td>F</td>\n",
       "      <td>33</td>\n",
       "      <td>171.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Belarus</td>\n",
       "      <td>BLR</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Basketball</td>\n",
       "      <td>Basketball Women's Basketball</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13688 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID                           Name Sex  Age  Height  Weight  \\\n",
       "0          1                  Andreea Aanei   F   22   170.0   125.0   \n",
       "1          2              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "2          3              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "3          4              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "4          5              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "...      ...                            ...  ..  ...     ...     ...   \n",
       "13683  13684                  Marc Zwiebler   M   32   181.0    75.0   \n",
       "13684  13685  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13685  13686  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13686  13687  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13687  13688         Olga Igorevna Zyuzkova   F   33   171.0    69.0   \n",
       "\n",
       "             Team  NOC        Games  Year  Season            City  \\\n",
       "0         Romania  ROU  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "1           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "2           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "3           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "4           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "...           ...  ...          ...   ...     ...             ...   \n",
       "13683     Germany  GER  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13684  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13685  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13686  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13687     Belarus  BLR  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "\n",
       "               Sport                                    Event Medal  \n",
       "0      Weightlifting  Weightlifting Women's Super-Heavyweight   NaN  \n",
       "1         Gymnastics   Gymnastics Men's Individual All-Around   NaN  \n",
       "2         Gymnastics          Gymnastics Men's Floor Exercise   NaN  \n",
       "3         Gymnastics           Gymnastics Men's Parallel Bars   NaN  \n",
       "4         Gymnastics          Gymnastics Men's Horizontal Bar   NaN  \n",
       "...              ...                                      ...   ...  \n",
       "13683      Badminton                  Badminton Men's Singles   NaN  \n",
       "13684      Athletics             Athletics Women's 100 metres   NaN  \n",
       "13685      Athletics             Athletics Women's 200 metres   NaN  \n",
       "13686      Athletics   Athletics Women's 4 x 100 metres Relay   NaN  \n",
       "13687     Basketball            Basketball Women's Basketball   NaN  \n",
       "\n",
       "[13688 rows x 15 columns]"
      ]
     },
     "execution_count": 3,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.read_csv('AtletasOlimpiadas2016.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Descripción de Variables\n",
    "\n",
    "- Name: variable categórica, describe el nombre de los atletas\n",
    "- Sex: variable categórica, describe el sexo de los atletas\n",
    "- Age: variable numérica discreta, describe la edad de los atletas\n",
    "- Team: variable categória, describe el equipo con el que juegan\n",
    "- Height: variable numérica discreta, describe la altura de los atletas\n",
    "- Weight: variable numérica discreta, describe la altura de los atletas\n",
    "- Sport: variable categória, describe el deporte en el que participan "
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hallazgos Interesantes\n",
    "- La edad promedio de los atletas olímpicos participantes del equipo de México es: 24 (Mujeres) y 25 (Hombres).\n",
    "- La edad promedio de los atletas olímpicos participantes de los equipos de Estados Unidos y Canadá es: 25 (Mujeres) y 26 (Hombres).\n",
    "- La altura de los atletas participantes varía desde 1.33 metros hasta 2.18 metros.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Index(['ID', 'Name', 'Sex', 'Age', 'Height', 'Weight', 'Team', 'NOC', 'Games',\n",
       "       'Year', 'Season', 'City', 'Sport', 'Event', 'Medal'],\n",
       "      dtype='object')"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.columns"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>NOC</th>\n",
       "      <th>Games</th>\n",
       "      <th>Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>City</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Event</th>\n",
       "      <th>Medal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Team</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Romania</th>\n",
       "      <td>1</td>\n",
       "      <td>Andreea Aanei</td>\n",
       "      <td>F</td>\n",
       "      <td>22</td>\n",
       "      <td>170.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>ROU</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Weightlifting</td>\n",
       "      <td>Weightlifting Women's Super-Heavyweight</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spain</th>\n",
       "      <td>2</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Individual All-Around</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spain</th>\n",
       "      <td>3</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Floor Exercise</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spain</th>\n",
       "      <td>4</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Parallel Bars</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Spain</th>\n",
       "      <td>5</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Horizontal Bar</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "         ID               Name Sex  Age  Height  Weight  NOC        Games  \\\n",
       "Team                                                                        \n",
       "Romania   1      Andreea Aanei   F   22   170.0   125.0  ROU  2016 Summer   \n",
       "Spain     2  Nstor Abad Sanjun   M   23   167.0    64.0  ESP  2016 Summer   \n",
       "Spain     3  Nstor Abad Sanjun   M   23   167.0    64.0  ESP  2016 Summer   \n",
       "Spain     4  Nstor Abad Sanjun   M   23   167.0    64.0  ESP  2016 Summer   \n",
       "Spain     5  Nstor Abad Sanjun   M   23   167.0    64.0  ESP  2016 Summer   \n",
       "\n",
       "         Year  Season            City          Sport  \\\n",
       "Team                                                   \n",
       "Romania  2016  Summer  Rio de Janeiro  Weightlifting   \n",
       "Spain    2016  Summer  Rio de Janeiro     Gymnastics   \n",
       "Spain    2016  Summer  Rio de Janeiro     Gymnastics   \n",
       "Spain    2016  Summer  Rio de Janeiro     Gymnastics   \n",
       "Spain    2016  Summer  Rio de Janeiro     Gymnastics   \n",
       "\n",
       "                                           Event Medal  \n",
       "Team                                                    \n",
       "Romania  Weightlifting Women's Super-Heavyweight   NaN  \n",
       "Spain     Gymnastics Men's Individual All-Around   NaN  \n",
       "Spain            Gymnastics Men's Floor Exercise   NaN  \n",
       "Spain             Gymnastics Men's Parallel Bars   NaN  \n",
       "Spain            Gymnastics Men's Horizontal Bar   NaN  "
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df.set_index('Team', inplace = True)\n",
    "df.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregunta 1\n",
    "\n",
    "¿Cuál es la Edad promedio de los Atletas de Norte América que participan en las Olimpiadas?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>NOC</th>\n",
       "      <th>Games</th>\n",
       "      <th>Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>City</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Event</th>\n",
       "      <th>Medal</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Team</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>50</td>\n",
       "      <td>Jos Javier Abella Fanjul</td>\n",
       "      <td>M</td>\n",
       "      <td>22</td>\n",
       "      <td>176.0</td>\n",
       "      <td>66.0</td>\n",
       "      <td>MEX</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Football</td>\n",
       "      <td>Football Men's Football</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>91</td>\n",
       "      <td>Karem Faride Achach Ramrez</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>169.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>MEX</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Synchronized Swimming</td>\n",
       "      <td>Synchronized Swimming Women's Duet</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>168</td>\n",
       "      <td>Tomas Alonso Aguilera Armendariz</td>\n",
       "      <td>M</td>\n",
       "      <td>27</td>\n",
       "      <td>202.0</td>\n",
       "      <td>95.0</td>\n",
       "      <td>MEX</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Volleyball</td>\n",
       "      <td>Volleyball Men's Volleyball</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>171</td>\n",
       "      <td>rick Germain Aguirre Tafolla</td>\n",
       "      <td>M</td>\n",
       "      <td>19</td>\n",
       "      <td>170.0</td>\n",
       "      <td>60.0</td>\n",
       "      <td>MEX</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Football</td>\n",
       "      <td>Football Men's Football</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>385</td>\n",
       "      <td>Alberto lvarez Muoz</td>\n",
       "      <td>M</td>\n",
       "      <td>25</td>\n",
       "      <td>191.0</td>\n",
       "      <td>78.0</td>\n",
       "      <td>MEX</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Men's Triple Jump</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>13395</td>\n",
       "      <td>Andrew Yorke</td>\n",
       "      <td>M</td>\n",
       "      <td>27</td>\n",
       "      <td>190.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>CAN</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Triathlon</td>\n",
       "      <td>Triathlon Men's Olympic Distance</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>13475</td>\n",
       "      <td>Shelina Laura Zadorsky</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>172.0</td>\n",
       "      <td>67.0</td>\n",
       "      <td>CAN</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Football</td>\n",
       "      <td>Football Women's Football</td>\n",
       "      <td>Bronze</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>13530</td>\n",
       "      <td>Carling Zeeman</td>\n",
       "      <td>F</td>\n",
       "      <td>25</td>\n",
       "      <td>187.0</td>\n",
       "      <td>85.0</td>\n",
       "      <td>CAN</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Rowing</td>\n",
       "      <td>Rowing Women's Single Sculls</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>13572</td>\n",
       "      <td>Mo Zhang</td>\n",
       "      <td>F</td>\n",
       "      <td>27</td>\n",
       "      <td>173.0</td>\n",
       "      <td>57.0</td>\n",
       "      <td>CAN</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Table Tennis</td>\n",
       "      <td>Table Tennis Women's Singles</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>13677</td>\n",
       "      <td>Kelita Zupancic</td>\n",
       "      <td>F</td>\n",
       "      <td>26</td>\n",
       "      <td>169.0</td>\n",
       "      <td>70.0</td>\n",
       "      <td>CAN</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Judo</td>\n",
       "      <td>Judo Women's Middleweight</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>1235 rows × 14 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "           ID                              Name Sex  Age  Height  Weight  NOC  \\\n",
       "Team                                                                            \n",
       "Mexico     50          Jos Javier Abella Fanjul   M   22   176.0    66.0  MEX   \n",
       "Mexico     91        Karem Faride Achach Ramrez   F   25   169.0    60.0  MEX   \n",
       "Mexico    168  Tomas Alonso Aguilera Armendariz   M   27   202.0    95.0  MEX   \n",
       "Mexico    171      rick Germain Aguirre Tafolla   M   19   170.0    60.0  MEX   \n",
       "Mexico    385               Alberto lvarez Muoz   M   25   191.0    78.0  MEX   \n",
       "...       ...                               ...  ..  ...     ...     ...  ...   \n",
       "Canada  13395                      Andrew Yorke   M   27   190.0    75.0  CAN   \n",
       "Canada  13475            Shelina Laura Zadorsky   F   23   172.0    67.0  CAN   \n",
       "Canada  13530                    Carling Zeeman   F   25   187.0    85.0  CAN   \n",
       "Canada  13572                          Mo Zhang   F   27   173.0    57.0  CAN   \n",
       "Canada  13677                   Kelita Zupancic   F   26   169.0    70.0  CAN   \n",
       "\n",
       "              Games  Year  Season            City                  Sport  \\\n",
       "Team                                                                       \n",
       "Mexico  2016 Summer  2016  Summer  Rio de Janeiro               Football   \n",
       "Mexico  2016 Summer  2016  Summer  Rio de Janeiro  Synchronized Swimming   \n",
       "Mexico  2016 Summer  2016  Summer  Rio de Janeiro             Volleyball   \n",
       "Mexico  2016 Summer  2016  Summer  Rio de Janeiro               Football   \n",
       "Mexico  2016 Summer  2016  Summer  Rio de Janeiro              Athletics   \n",
       "...             ...   ...     ...             ...                    ...   \n",
       "Canada  2016 Summer  2016  Summer  Rio de Janeiro              Triathlon   \n",
       "Canada  2016 Summer  2016  Summer  Rio de Janeiro               Football   \n",
       "Canada  2016 Summer  2016  Summer  Rio de Janeiro                 Rowing   \n",
       "Canada  2016 Summer  2016  Summer  Rio de Janeiro           Table Tennis   \n",
       "Canada  2016 Summer  2016  Summer  Rio de Janeiro                   Judo   \n",
       "\n",
       "                                     Event   Medal  \n",
       "Team                                                \n",
       "Mexico             Football Men's Football     NaN  \n",
       "Mexico  Synchronized Swimming Women's Duet     NaN  \n",
       "Mexico         Volleyball Men's Volleyball     NaN  \n",
       "Mexico             Football Men's Football     NaN  \n",
       "Mexico         Athletics Men's Triple Jump     NaN  \n",
       "...                                    ...     ...  \n",
       "Canada    Triathlon Men's Olympic Distance     NaN  \n",
       "Canada           Football Women's Football  Bronze  \n",
       "Canada        Rowing Women's Single Sculls     NaN  \n",
       "Canada        Table Tennis Women's Singles     NaN  \n",
       "Canada           Judo Women's Middleweight     NaN  \n",
       "\n",
       "[1235 rows x 14 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "NorthA = df.loc[['Mexico', 'United States', 'Canada']]\n",
    "NorthA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe52ade8fd0>"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.boxplot(data = NorthA.loc[:,['Age']])"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusión: La edad promedio de los atletas olímpicos participantes de Norte América es entre 24 y 26 años."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregunta 2\n",
    "¿La edad de los atletas varía dependiendo del sexo?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Sex</th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Team</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Canada</th>\n",
       "      <td>25.488000</td>\n",
       "      <td>26.646259</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Mexico</th>\n",
       "      <td>24.964286</td>\n",
       "      <td>25.638554</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>United States</th>\n",
       "      <td>25.763231</td>\n",
       "      <td>26.697059</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Sex                    F          M\n",
       "Team                               \n",
       "Canada         25.488000  26.646259\n",
       "Mexico         24.964286  25.638554\n",
       "United States  25.763231  26.697059"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "pivot = pd.pivot_table(NorthA,\n",
    "                       index = 'Team', columns = 'Sex', values = 'Age',\n",
    "                      )\n",
    "pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe52735cc10>"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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UPeIJUkHpJl3P74PuCoiPlM9vjgzvz+E138DuLG69X4xsKTqbx21uu+gds3qYmB5RGygdqfk//bT16HAp6pb8ruBJ3nxetcXgM9FxHPACcDV1O5yfBy4p1cfffc7A7giIiZV9VwOPARcX7UFcEVmPjOEMUtSS8275ojGdrh0+6C7RARnn302119/PQA7d+5k2rRpHH/88dxyyy0HdPimhVpmPgi8ZR/PdfbaforqmlpmrgJWVdsPAfP6vPTMfvraBpw8SC2PAr++j+duAm7q1fTh6muw/dZSW2bs640D1SJJI91hhx3G+vXree655xg3bhy33norM2bMaEjfvk2WJKnlTj31VL75zW8CsHz5chYuXNiQfg01SVLLnXXWWaxYsYLu7m7WrVvH8ccf35B+DTVJUsvNmzePzZs3s3z5ck499dSG9XtQvU2WJGnkeNe73sWFF17IqlWr2LZtW0P6NNQkSW1x7rnncvjhhzN37lxWrVrVkD4NNUkawdb9/qOD71Snob6jyMyZM1myZEnDjg+GmiSpxXbs2LFXW2dnJ52dnQfctzeKSJKKYahJkophqEnSCJIktfd3Hx6GWquhJkkjyKPP9LDz/34yLIItM9m2bRtjx/b3YSn980YRSRpB/uHup1kMHHH4UwT1fXRXvTY+O66h/QGMHTuWmTNn1r2/oSZJI8hPnt/NJXc05g+d+9p86WlN6XcoDLU2mztjEmsOgv8IklQCr6lJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSimGoSZKKYahJkophqEmSijG63QWMeD+8D5ZOancVkrT/lm5vdwUvcKYmSSqGoSZJKoahJkkqhqEmSSqGoSZJKoahJkkqRl239EfEPKCj9/6Z+bUm1SRJ0n4ZNNQi4lpgHrAB2F01J2CoSZIOKvXM1N6Qmb/c9EokSTpA9VxTuysiDDVJ0kGvnpnal6gF2+PA80AAmZnzmlqZJElDVE+ofR54L/AAL15TkyTpoFNPqD2ZmV9veiWSJB2gekLt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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "pivot.plot(kind='barh')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusión: La edad promedio de los atletas olímpicos participantes de México, Canadá y Estados Unidos varía muy poco dependiendo del sexo"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Pregunta 3\n",
    "¿Cuál es el comportamiento o cómo se distibuye la altura de los atletas de todos los equipos?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Sex</th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Team</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Afghanistan</th>\n",
       "      <td>165.000000</td>\n",
       "      <td>178.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Albania</th>\n",
       "      <td>166.333333</td>\n",
       "      <td>186.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Algeria</th>\n",
       "      <td>163.769231</td>\n",
       "      <td>176.213115</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>American Samoa</th>\n",
       "      <td>172.000000</td>\n",
       "      <td>178.333333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Andorra</th>\n",
       "      <td>166.500000</td>\n",
       "      <td>176.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Venezuela</th>\n",
       "      <td>167.275862</td>\n",
       "      <td>181.373333</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Vietnam</th>\n",
       "      <td>164.875000</td>\n",
       "      <td>170.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Yemen</th>\n",
       "      <td>166.000000</td>\n",
       "      <td>171.500000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zambia</th>\n",
       "      <td>176.000000</td>\n",
       "      <td>174.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Zimbabwe</th>\n",
       "      <td>164.772727</td>\n",
       "      <td>175.333333</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>246 rows × 2 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "Sex                      F           M\n",
       "Team                                  \n",
       "Afghanistan     165.000000  178.000000\n",
       "Albania         166.333333  186.000000\n",
       "Algeria         163.769231  176.213115\n",
       "American Samoa  172.000000  178.333333\n",
       "Andorra         166.500000  176.500000\n",
       "...                    ...         ...\n",
       "Venezuela       167.275862  181.373333\n",
       "Vietnam         164.875000  170.000000\n",
       "Yemen           166.000000  171.500000\n",
       "Zambia          176.000000  174.750000\n",
       "Zimbabwe        164.772727  175.333333\n",
       "\n",
       "[246 rows x 2 columns]"
      ]
     },
     "execution_count": 10,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_pivot = pd.pivot_table(df,\n",
    "                          index = 'Team', columns = 'Sex', values = 'Height', aggfunc = 'mean'\n",
    "                      )\n",
    "my_pivot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<matplotlib.axes._subplots.AxesSubplot at 0x7fe527a78d90>"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "my_pivot.plot(kind = 'line')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0.5, 1.0, 'Altura Atletas')"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "df['Height'].plot(kind='hist')\n",
    "plt.title('Altura Atletas')"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Conclusión: La altura de los atletas varía mucho dependiendo de los equipos(paises)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Limitaciones\n",
    "Los principales problemas a los que me enfrenté fueron encontrar una base de datos interesante que me proporcionara la información necesaria para poder realizar la actividad y muchos datos de la base no eran numéricos.\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Presentación Final\n",
    "### Evaluación del desarrollo de mis competencias\n",
    "Katya Sosa A01177329"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Introducción\n",
    "\n",
    "En esta unidad de formación fui capaz de aprender a utilizar la herramienta de Python, en donde pude desarrollar competencias para realizar diferentes tablas, gráficas, modelos de regresión, entre otros modelos que ayudan a organizar la información de bases de datos con la finalidad de encontrar respuestas y soluciones a distintos problemas.\n",
    "\n",
    "La información que se muestra en la base de datos representa las características de los Atletas Olímpicos que fueron a las Olimpiadas de “Río de Janeiro” en el 2016.\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>ID</th>\n",
       "      <th>Name</th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Team</th>\n",
       "      <th>NOC</th>\n",
       "      <th>Games</th>\n",
       "      <th>Year</th>\n",
       "      <th>Season</th>\n",
       "      <th>City</th>\n",
       "      <th>Sport</th>\n",
       "      <th>Event</th>\n",
       "      <th>Medal</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Andreea Aanei</td>\n",
       "      <td>F</td>\n",
       "      <td>22</td>\n",
       "      <td>170.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>Romania</td>\n",
       "      <td>ROU</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Weightlifting</td>\n",
       "      <td>Weightlifting Women's Super-Heavyweight</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Individual All-Around</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Floor Exercise</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Parallel Bars</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Nstor Abad Sanjun</td>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>ESP</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Gymnastics</td>\n",
       "      <td>Gymnastics Men's Horizontal Bar</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13683</th>\n",
       "      <td>13684</td>\n",
       "      <td>Marc Zwiebler</td>\n",
       "      <td>M</td>\n",
       "      <td>32</td>\n",
       "      <td>181.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>GER</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Badminton</td>\n",
       "      <td>Badminton Men's Singles</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13684</th>\n",
       "      <td>13685</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 100 metres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13685</th>\n",
       "      <td>13686</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 200 metres</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13686</th>\n",
       "      <td>13687</td>\n",
       "      <td>Viktoriya Viktorovna Zyabkina</td>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>KAZ</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Athletics</td>\n",
       "      <td>Athletics Women's 4 x 100 metres Relay</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13687</th>\n",
       "      <td>13688</td>\n",
       "      <td>Olga Igorevna Zyuzkova</td>\n",
       "      <td>F</td>\n",
       "      <td>33</td>\n",
       "      <td>171.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Belarus</td>\n",
       "      <td>BLR</td>\n",
       "      <td>2016 Summer</td>\n",
       "      <td>2016</td>\n",
       "      <td>Summer</td>\n",
       "      <td>Rio de Janeiro</td>\n",
       "      <td>Basketball</td>\n",
       "      <td>Basketball Women's Basketball</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13688 rows × 15 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "          ID                           Name Sex  Age  Height  Weight  \\\n",
       "0          1                  Andreea Aanei   F   22   170.0   125.0   \n",
       "1          2              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "2          3              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "3          4              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "4          5              Nstor Abad Sanjun   M   23   167.0    64.0   \n",
       "...      ...                            ...  ..  ...     ...     ...   \n",
       "13683  13684                  Marc Zwiebler   M   32   181.0    75.0   \n",
       "13684  13685  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13685  13686  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13686  13687  Viktoriya Viktorovna Zyabkina   F   23   174.0    62.0   \n",
       "13687  13688         Olga Igorevna Zyuzkova   F   33   171.0    69.0   \n",
       "\n",
       "             Team  NOC        Games  Year  Season            City  \\\n",
       "0         Romania  ROU  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "1           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "2           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "3           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "4           Spain  ESP  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "...           ...  ...          ...   ...     ...             ...   \n",
       "13683     Germany  GER  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13684  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13685  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13686  Kazakhstan  KAZ  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "13687     Belarus  BLR  2016 Summer  2016  Summer  Rio de Janeiro   \n",
       "\n",
       "               Sport                                    Event Medal  \n",
       "0      Weightlifting  Weightlifting Women's Super-Heavyweight   NaN  \n",
       "1         Gymnastics   Gymnastics Men's Individual All-Around   NaN  \n",
       "2         Gymnastics          Gymnastics Men's Floor Exercise   NaN  \n",
       "3         Gymnastics           Gymnastics Men's Parallel Bars   NaN  \n",
       "4         Gymnastics          Gymnastics Men's Horizontal Bar   NaN  \n",
       "...              ...                                      ...   ...  \n",
       "13683      Badminton                  Badminton Men's Singles   NaN  \n",
       "13684      Athletics             Athletics Women's 100 metres   NaN  \n",
       "13685      Athletics             Athletics Women's 200 metres   NaN  \n",
       "13686      Athletics   Athletics Women's 4 x 100 metres Relay   NaN  \n",
       "13687     Basketball            Basketball Women's Basketball   NaN  \n",
       "\n",
       "[13688 rows x 15 columns]"
      ]
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import pandas as pd \n",
    "import numpy as np\n",
    "\n",
    "df = pd.read_csv('AtletasOlimpiadas2016.csv')\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Sex</th>\n",
       "      <th>Age</th>\n",
       "      <th>Height</th>\n",
       "      <th>Weight</th>\n",
       "      <th>Team</th>\n",
       "      <th>Sport</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>F</td>\n",
       "      <td>22</td>\n",
       "      <td>170.0</td>\n",
       "      <td>125.0</td>\n",
       "      <td>Romania</td>\n",
       "      <td>Weightlifting</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Gymnastics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Gymnastics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Gymnastics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>M</td>\n",
       "      <td>23</td>\n",
       "      <td>167.0</td>\n",
       "      <td>64.0</td>\n",
       "      <td>Spain</td>\n",
       "      <td>Gymnastics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13683</th>\n",
       "      <td>M</td>\n",
       "      <td>32</td>\n",
       "      <td>181.0</td>\n",
       "      <td>75.0</td>\n",
       "      <td>Germany</td>\n",
       "      <td>Badminton</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13684</th>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>Athletics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13685</th>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>Athletics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13686</th>\n",
       "      <td>F</td>\n",
       "      <td>23</td>\n",
       "      <td>174.0</td>\n",
       "      <td>62.0</td>\n",
       "      <td>Kazakhstan</td>\n",
       "      <td>Athletics</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13687</th>\n",
       "      <td>F</td>\n",
       "      <td>33</td>\n",
       "      <td>171.0</td>\n",
       "      <td>69.0</td>\n",
       "      <td>Belarus</td>\n",
       "      <td>Basketball</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>13688 rows × 6 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "      Sex  Age  Height  Weight        Team          Sport\n",
       "0       F   22   170.0   125.0     Romania  Weightlifting\n",
       "1       M   23   167.0    64.0       Spain     Gymnastics\n",
       "2       M   23   167.0    64.0       Spain     Gymnastics\n",
       "3       M   23   167.0    64.0       Spain     Gymnastics\n",
       "4       M   23   167.0    64.0       Spain     Gymnastics\n",
       "...    ..  ...     ...     ...         ...            ...\n",
       "13683   M   32   181.0    75.0     Germany      Badminton\n",
       "13684   F   23   174.0    62.0  Kazakhstan      Athletics\n",
       "13685   F   23   174.0    62.0  Kazakhstan      Athletics\n",
       "13686   F   23   174.0    62.0  Kazakhstan      Athletics\n",
       "13687   F   33   171.0    69.0     Belarus     Basketball\n",
       "\n",
       "[13688 rows x 6 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Eliminar las columnas que no se van a utilizar en el análisis\n",
    "df.drop(['ID','Name', 'NOC', 'Games', 'Year', 'Season', 'City', 'Event', 'Medal'], axis=1,\n",
    "inplace=True)\n",
    "\n",
    "# Cambiar etiquetas de columnas por strings \n",
    "df.columns = list(map(str, df.columns))\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr th {\n",
       "        text-align: left;\n",
       "    }\n",
       "\n",
       "    .dataframe thead tr:last-of-type th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr>\n",
       "      <th></th>\n",
       "      <th colspan=\"2\" halign=\"left\">Age</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Height</th>\n",
       "      <th colspan=\"2\" halign=\"left\">Weight</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "      <th>F</th>\n",
       "      <th>M</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sport</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Archery</th>\n",
       "      <td>25.810000</td>\n",
       "      <td>24.680000</td>\n",
       "      <td>167.040404</td>\n",
       "      <td>179.686869</td>\n",
       "      <td>64.424242</td>\n",
       "      <td>80.040404</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Athletics</th>\n",
       "      <td>26.251656</td>\n",
       "      <td>26.454615</td>\n",
       "      <td>169.126821</td>\n",
       "      <td>180.920290</td>\n",
       "      <td>59.853345</td>\n",
       "      <td>74.440161</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Badminton</th>\n",
       "      <td>25.670455</td>\n",
       "      <td>28.011236</td>\n",
       "      <td>168.613636</td>\n",
       "      <td>180.325843</td>\n",
       "      <td>61.301205</td>\n",
       "      <td>76.287356</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Basketball</th>\n",
       "      <td>27.507143</td>\n",
       "      <td>27.829787</td>\n",
       "      <td>183.300000</td>\n",
       "      <td>200.503546</td>\n",
       "      <td>75.359712</td>\n",
       "      <td>100.198582</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Beach Volleyball</th>\n",
       "      <td>28.187500</td>\n",
       "      <td>29.187500</td>\n",
       "      <td>180.041667</td>\n",
       "      <td>194.708333</td>\n",
       "      <td>68.979167</td>\n",
       "      <td>88.187500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Boxing</th>\n",
       "      <td>27.083333</td>\n",
       "      <td>24.757085</td>\n",
       "      <td>168.416667</td>\n",
       "      <td>175.271967</td>\n",
       "      <td>61.972222</td>\n",
       "      <td>67.314894</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Canoeing</th>\n",
       "      <td>27.339506</td>\n",
       "      <td>26.942652</td>\n",
       "      <td>169.873418</td>\n",
       "      <td>182.426523</td>\n",
       "      <td>66.734177</td>\n",
       "      <td>82.827957</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Cycling</th>\n",
       "      <td>27.063670</td>\n",
       "      <td>27.085000</td>\n",
       "      <td>167.424812</td>\n",
       "      <td>179.669192</td>\n",
       "      <td>60.564885</td>\n",
       "      <td>73.559494</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Diving</th>\n",
       "      <td>23.415730</td>\n",
       "      <td>23.898876</td>\n",
       "      <td>160.842697</td>\n",
       "      <td>171.977528</td>\n",
       "      <td>54.348315</td>\n",
       "      <td>66.842697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Equestrianism</th>\n",
       "      <td>36.595420</td>\n",
       "      <td>38.236607</td>\n",
       "      <td>168.152672</td>\n",
       "      <td>179.572727</td>\n",
       "      <td>58.587786</td>\n",
       "      <td>73.445455</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Fencing</th>\n",
       "      <td>26.867816</td>\n",
       "      <td>28.232558</td>\n",
       "      <td>171.609195</td>\n",
       "      <td>183.730994</td>\n",
       "      <td>63.459770</td>\n",
       "      <td>79.134503</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Football</th>\n",
       "      <td>25.674877</td>\n",
       "      <td>22.337037</td>\n",
       "      <td>167.822660</td>\n",
       "      <td>179.492593</td>\n",
       "      <td>60.950739</td>\n",
       "      <td>73.947955</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Golf</th>\n",
       "      <td>26.883333</td>\n",
       "      <td>32.166667</td>\n",
       "      <td>168.733333</td>\n",
       "      <td>179.600000</td>\n",
       "      <td>63.436364</td>\n",
       "      <td>79.245283</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Gymnastics</th>\n",
       "      <td>19.887728</td>\n",
       "      <td>24.002092</td>\n",
       "      <td>154.710183</td>\n",
       "      <td>167.456067</td>\n",
       "      <td>48.496042</td>\n",
       "      <td>62.903766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Handball</th>\n",
       "      <td>27.619318</td>\n",
       "      <td>28.384181</td>\n",
       "      <td>175.693182</td>\n",
       "      <td>191.559322</td>\n",
       "      <td>70.505682</td>\n",
       "      <td>95.960452</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Hockey</th>\n",
       "      <td>25.572165</td>\n",
       "      <td>26.933673</td>\n",
       "      <td>166.556701</td>\n",
       "      <td>179.918367</td>\n",
       "      <td>60.242268</td>\n",
       "      <td>77.275510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Judo</th>\n",
       "      <td>26.460526</td>\n",
       "      <td>26.080169</td>\n",
       "      <td>166.887417</td>\n",
       "      <td>178.192982</td>\n",
       "      <td>65.894737</td>\n",
       "      <td>84.809735</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Modern Pentathlon</th>\n",
       "      <td>25.083333</td>\n",
       "      <td>26.111111</td>\n",
       "      <td>170.388889</td>\n",
       "      <td>182.527778</td>\n",
       "      <td>58.722222</td>\n",
       "      <td>73.944444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rhythmic Gymnastics</th>\n",
       "      <td>20.250000</td>\n",
       "      <td>NaN</td>\n",
       "      <td>168.760417</td>\n",
       "      <td>NaN</td>\n",
       "      <td>50.395833</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rowing</th>\n",
       "      <td>26.598174</td>\n",
       "      <td>27.045317</td>\n",
       "      <td>177.582569</td>\n",
       "      <td>189.884848</td>\n",
       "      <td>69.807339</td>\n",
       "      <td>86.521212</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Rugby Sevens</th>\n",
       "      <td>26.114865</td>\n",
       "      <td>25.980132</td>\n",
       "      <td>167.636986</td>\n",
       "      <td>182.834437</td>\n",
       "      <td>66.628378</td>\n",
       "      <td>91.006623</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sailing</th>\n",
       "      <td>25.834356</td>\n",
       "      <td>28.737327</td>\n",
       "      <td>169.306748</td>\n",
       "      <td>181.300926</td>\n",
       "      <td>63.062893</td>\n",
       "      <td>77.305556</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Shooting</th>\n",
       "      <td>29.443925</td>\n",
       "      <td>32.146628</td>\n",
       "      <td>164.855140</td>\n",
       "      <td>177.870206</td>\n",
       "      <td>62.390476</td>\n",
       "      <td>80.009009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Swimming</th>\n",
       "      <td>22.140604</td>\n",
       "      <td>23.257745</td>\n",
       "      <td>173.824866</td>\n",
       "      <td>187.344346</td>\n",
       "      <td>63.309746</td>\n",
       "      <td>80.667939</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Synchronized Swimming</th>\n",
       "      <td>23.491525</td>\n",
       "      <td>NaN</td>\n",
       "      <td>168.720339</td>\n",
       "      <td>NaN</td>\n",
       "      <td>55.618644</td>\n",
       "      <td>NaN</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Table Tennis</th>\n",
       "      <td>27.245763</td>\n",
       "      <td>27.720339</td>\n",
       "      <td>165.356522</td>\n",
       "      <td>178.550847</td>\n",
       "      <td>57.344828</td>\n",
       "      <td>71.906780</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Taekwondo</th>\n",
       "      <td>24.093750</td>\n",
       "      <td>24.161290</td>\n",
       "      <td>173.265625</td>\n",
       "      <td>186.241935</td>\n",
       "      <td>60.645161</td>\n",
       "      <td>74.177419</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Tennis</th>\n",
       "      <td>26.538462</td>\n",
       "      <td>29.545455</td>\n",
       "      <td>173.391608</td>\n",
       "      <td>186.916084</td>\n",
       "      <td>63.937063</td>\n",
       "      <td>80.272727</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Trampolining</th>\n",
       "      <td>25.750000</td>\n",
       "      <td>24.437500</td>\n",
       "      <td>162.687500</td>\n",
       "      <td>172.312500</td>\n",
       "      <td>52.500000</td>\n",
       "      <td>64.937500</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Triathlon</th>\n",
       "      <td>28.090909</td>\n",
       "      <td>27.290909</td>\n",
       "      <td>167.690909</td>\n",
       "      <td>178.709091</td>\n",
       "      <td>54.672727</td>\n",
       "      <td>66.944444</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Volleyball</th>\n",
       "      <td>26.640845</td>\n",
       "      <td>27.553191</td>\n",
       "      <td>183.816901</td>\n",
       "      <td>196.893617</td>\n",
       "      <td>71.091549</td>\n",
       "      <td>89.560284</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Water Polo</th>\n",
       "      <td>25.038462</td>\n",
       "      <td>27.701299</td>\n",
       "      <td>176.288462</td>\n",
       "      <td>191.363636</td>\n",
       "      <td>71.701923</td>\n",
       "      <td>94.733766</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Weightlifting</th>\n",
       "      <td>24.058252</td>\n",
       "      <td>25.322368</td>\n",
       "      <td>160.611650</td>\n",
       "      <td>170.848684</td>\n",
       "      <td>68.631068</td>\n",
       "      <td>87.434211</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Wrestling</th>\n",
       "      <td>25.633929</td>\n",
       "      <td>26.995726</td>\n",
       "      <td>165.214286</td>\n",
       "      <td>176.021368</td>\n",
       "      <td>62.000000</td>\n",
       "      <td>85.700855</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                             Age                 Height              \\\n",
       "Sex                            F          M           F           M   \n",
       "Sport                                                                 \n",
       "Archery                25.810000  24.680000  167.040404  179.686869   \n",
       "Athletics              26.251656  26.454615  169.126821  180.920290   \n",
       "Badminton              25.670455  28.011236  168.613636  180.325843   \n",
       "Basketball             27.507143  27.829787  183.300000  200.503546   \n",
       "Beach Volleyball       28.187500  29.187500  180.041667  194.708333   \n",
       "Boxing                 27.083333  24.757085  168.416667  175.271967   \n",
       "Canoeing               27.339506  26.942652  169.873418  182.426523   \n",
       "Cycling                27.063670  27.085000  167.424812  179.669192   \n",
       "Diving                 23.415730  23.898876  160.842697  171.977528   \n",
       "Equestrianism          36.595420  38.236607  168.152672  179.572727   \n",
       "Fencing                26.867816  28.232558  171.609195  183.730994   \n",
       "Football               25.674877  22.337037  167.822660  179.492593   \n",
       "Golf                   26.883333  32.166667  168.733333  179.600000   \n",
       "Gymnastics             19.887728  24.002092  154.710183  167.456067   \n",
       "Handball               27.619318  28.384181  175.693182  191.559322   \n",
       "Hockey                 25.572165  26.933673  166.556701  179.918367   \n",
       "Judo                   26.460526  26.080169  166.887417  178.192982   \n",
       "Modern Pentathlon      25.083333  26.111111  170.388889  182.527778   \n",
       "Rhythmic Gymnastics    20.250000        NaN  168.760417         NaN   \n",
       "Rowing                 26.598174  27.045317  177.582569  189.884848   \n",
       "Rugby Sevens           26.114865  25.980132  167.636986  182.834437   \n",
       "Sailing                25.834356  28.737327  169.306748  181.300926   \n",
       "Shooting               29.443925  32.146628  164.855140  177.870206   \n",
       "Swimming               22.140604  23.257745  173.824866  187.344346   \n",
       "Synchronized Swimming  23.491525        NaN  168.720339         NaN   \n",
       "Table Tennis           27.245763  27.720339  165.356522  178.550847   \n",
       "Taekwondo              24.093750  24.161290  173.265625  186.241935   \n",
       "Tennis                 26.538462  29.545455  173.391608  186.916084   \n",
       "Trampolining           25.750000  24.437500  162.687500  172.312500   \n",
       "Triathlon              28.090909  27.290909  167.690909  178.709091   \n",
       "Volleyball             26.640845  27.553191  183.816901  196.893617   \n",
       "Water Polo             25.038462  27.701299  176.288462  191.363636   \n",
       "Weightlifting          24.058252  25.322368  160.611650  170.848684   \n",
       "Wrestling              25.633929  26.995726  165.214286  176.021368   \n",
       "\n",
       "                          Weight              \n",
       "Sex                            F           M  \n",
       "Sport                                         \n",
       "Archery                64.424242   80.040404  \n",
       "Athletics              59.853345   74.440161  \n",
       "Badminton              61.301205   76.287356  \n",
       "Basketball             75.359712  100.198582  \n",
       "Beach Volleyball       68.979167   88.187500  \n",
       "Boxing                 61.972222   67.314894  \n",
       "Canoeing               66.734177   82.827957  \n",
       "Cycling                60.564885   73.559494  \n",
       "Diving                 54.348315   66.842697  \n",
       "Equestrianism          58.587786   73.445455  \n",
       "Fencing                63.459770   79.134503  \n",
       "Football               60.950739   73.947955  \n",
       "Golf                   63.436364   79.245283  \n",
       "Gymnastics             48.496042   62.903766  \n",
       "Handball               70.505682   95.960452  \n",
       "Hockey                 60.242268   77.275510  \n",
       "Judo                   65.894737   84.809735  \n",
       "Modern Pentathlon      58.722222   73.944444  \n",
       "Rhythmic Gymnastics    50.395833         NaN  \n",
       "Rowing                 69.807339   86.521212  \n",
       "Rugby Sevens           66.628378   91.006623  \n",
       "Sailing                63.062893   77.305556  \n",
       "Shooting               62.390476   80.009009  \n",
       "Swimming               63.309746   80.667939  \n",
       "Synchronized Swimming  55.618644         NaN  \n",
       "Table Tennis           57.344828   71.906780  \n",
       "Taekwondo              60.645161   74.177419  \n",
       "Tennis                 63.937063   80.272727  \n",
       "Trampolining           52.500000   64.937500  \n",
       "Triathlon              54.672727   66.944444  \n",
       "Volleyball             71.091549   89.560284  \n",
       "Water Polo             71.701923   94.733766  \n",
       "Weightlifting          68.631068   87.434211  \n",
       "Wrestling              62.000000   85.700855  "
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "my_pivott = pd.pivot_table(df,\n",
    "                          index = 'Sport', columns = 'Sex', values = ['Age', 'Height', 'Weight'], aggfunc = 'mean'\n",
    "                      )\n",
    "my_pivott"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "# Variables Críticas\n",
    "\n",
    "Las variables críticas que están siendo utilizadas dentro de este proceso son aquellas que se ven reflejadas como columnas dentro de la pivot table:\n",
    "\n",
    "- *Sport*: variable categória, describe el deporte en el que participan\n",
    "- *Sex*: variable categórica, describe el sexo de los atletas\n",
    "- *Age*: variable numérica discreta, describe la edad de los atletas\n",
    "- *Height*: variable numérica discreta, describe la altura de los atletas\n",
    "- *Weight*: variable numérica discreta, descr\n",
    "- *Team*: variable categória, describe el equipo con el que jueganibe la altura de los atletas\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Variables Dependientess\n",
    "- Height\n",
    "\n",
    "#### Variables Independientes\n",
    "- Weight\n",
    "- Age\n",
    "\n",
    "Se llevó a cabo un análisis de correlación para identificar si las variables independientes mencionadas anteriormente tienen algún tipo de correlación con el 'Weight' (Peso)\n",
    "\n",
    "### Modelos Utilizados para predecir variables críticas\n",
    "- Modelo de Regresión Lineal Simple\n",
    "- Análisis de Correlación"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<seaborn.axisgrid.FacetGrid at 0x7fe5270eb5d0>"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 404.625x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 404.625x360 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Diagrama de dispersión Altura vs Peso\n",
    "sns.lmplot(x = 'Height', \n",
    "           y = 'Weight',\n",
    "           data = df,\n",
    "           fit_reg = False,\n",
    "           hue = 'Sex')\n",
    "\n",
    "#Diagrama de dispersión Altura vs Edad\n",
    "sns.lmplot(x = 'Height', \n",
    "           y = 'Age',\n",
    "           data = df,\n",
    "           fit_reg = False,\n",
    "           hue = 'Sex')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "La correlación entre las variables también se puede identificar por medio de un diagrama de dispersión.\n",
    "- El comportamiento que muestran los datos con las variables \"Height\" y \"Weight\" es una correlación alta positiva.\n",
    "- El comportamiento que muestran los datos con las variables \"Height\" y \"Age\" es una correlación baja."
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: statsmodels in /srv/conda/envs/notebook/lib/python3.7/site-packages (0.13.1)\n",
      "Requirement already satisfied: pandas>=0.25 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from statsmodels) (1.0.4)\n",
      "Requirement already satisfied: scipy>=1.3 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from statsmodels) (1.4.1)\n",
      "Requirement already satisfied: patsy>=0.5.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from statsmodels) (0.5.2)\n",
      "Requirement already satisfied: numpy>=1.17 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from statsmodels) (1.18.5)\n",
      "Requirement already satisfied: pytz>=2017.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from pandas>=0.25->statsmodels) (2020.1)\n",
      "Requirement already satisfied: python-dateutil>=2.6.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from pandas>=0.25->statsmodels) (2.8.1)\n",
      "Requirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.7/site-packages (from patsy>=0.5.2->statsmodels) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install statsmodels"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: seaborn in /srv/conda/envs/notebook/lib/python3.7/site-packages (0.11.2)\n",
      "Requirement already satisfied: pandas>=0.23 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.0.4)\n",
      "Requirement already satisfied: scipy>=1.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.4.1)\n",
      "Requirement already satisfied: matplotlib>=2.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (3.2.1)\n",
      "Requirement already satisfied: numpy>=1.15 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from seaborn) (1.18.5)\n",
      "Requirement already satisfied: cycler>=0.10 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (0.10.0)\n",
      "Requirement already satisfied: python-dateutil>=2.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.8.1)\n",
      "Requirement already satisfied: pyparsing!=2.0.4,!=2.1.2,!=2.1.6,>=2.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (2.4.7)\n",
      "Requirement already satisfied: kiwisolver>=1.0.1 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from matplotlib>=2.2->seaborn) (1.2.0)\n",
      "Requirement already satisfied: pytz>=2017.2 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from pandas>=0.23->seaborn) (2020.1)\n",
      "Requirement already satisfied: six in /srv/conda/envs/notebook/lib/python3.7/site-packages (from cycler>=0.10->matplotlib>=2.2->seaborn) (1.16.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install seaborn"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: sklearn in /srv/conda/envs/notebook/lib/python3.7/site-packages (0.0)\n",
      "Requirement already satisfied: scikit-learn in /srv/conda/envs/notebook/lib/python3.7/site-packages (from sklearn) (1.0.1)\n",
      "Requirement already satisfied: numpy>=1.14.6 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from scikit-learn->sklearn) (1.18.5)\n",
      "Requirement already satisfied: threadpoolctl>=2.0.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from scikit-learn->sklearn) (3.0.0)\n",
      "Requirement already satisfied: scipy>=1.1.0 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from scikit-learn->sklearn) (1.4.1)\n",
      "Requirement already satisfied: joblib>=0.11 in /srv/conda/envs/notebook/lib/python3.7/site-packages (from scikit-learn->sklearn) (1.1.0)\n",
      "Note: you may need to restart the kernel to use updated packages.\n"
     ]
    }
   ],
   "source": [
    "pip install sklearn"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Hipótesis"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "import seaborn as sns\n",
    "import statsmodels.api as sm\n",
    "import numpy as nms\n",
    "from sklearn import linear_model"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. Pregunta de investigacion 1: \n",
    "### Cual es el impacto del Peso en la Altura de los atletas?\n",
    "\n",
    "`Height = b0+ b1*Weight`"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#### Variable Dependiente\n",
    "- Height\n",
    "\n",
    "#### Variable Independiente\n",
    "- Weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "modelA = sm.OLS.from_formula('Height~Weight', data = df)\n",
    "resultA = modelA.fit()\n",
    "resultA.summary()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "tags": []
   },
   "source": [
    "### Observaciones: \n",
    "* Variable dependiente: Height\n",
    "* Variable Independiente: Weight \n",
    "* R-squared: 0.610; por lo tanto, este modelo no es considerado confiable. Porque explica solo 61% weight basado en height. Para ser confiable debe de ser mayor a 0.7.\n",
    "\n",
    "Height = 135.7027 + 0.5682*Weight"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "print('Altura de una persona que pesa: 64 kilos \\t', 136.7027 + 0.5682*64)\n",
    "my_pivott.iloc[:1, 2:5]"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize = (12,8))\n",
    "sns.set(font_scale = 1.7)\n",
    "\n",
    "reg_plot = sns.regplot(x = 'Weight',\n",
    "            y = 'Height',\n",
    "            data = df,\n",
    "            marker = '+',\n",
    "            color = 'pink',\n",
    "            scatter_kws = {'s': 200}\n",
    "           )\n",
    "reg_plot.set_title('Regression plot of Height vs Weight')\n",
    "reg_plot.text( 85, 140, 'Height = 136.7027 + 0.5682*Weight',\n",
    "              color = 'red',\n",
    "              weight = 'semibold',\n",
    "              size = 'small'\n",
    "             )\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "RESIA = resultA.resid\n",
    "RESIA"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "reg_plot = sns.scatterplot(x = resultA.fittedvalues,\n",
    "                            y = RESIA)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusión\n",
    "jdhkjshkjd"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. Pregunta de investigacion 2: \n",
    "### En que deporte los atletas son más altos?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "my_pivott2 = pd.pivot_table(df,\n",
    "                          index = 'Sport', values = ['Age','Height', 'Weight'], aggfunc = 'mean'\n",
    "                      )\n",
    "my_pivott2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filterSports = my_pivott2.loc[['Basketball', 'Football', 'Tennis', 'Golf', 'Swimming', 'Boxing','Gymnastics',]]\n",
    "filterSports"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "import matplotlib.pyplot as plt\n",
    "color_list = ['red', 'orange', 'yellow', 'green', 'blue', 'purple','pink',] \n",
    "filterSports['Height'].plot(kind='pie',\n",
    "                   figsize = (17,8),\n",
    "                   startangle = 90,\n",
    "                   autopct = '%1.2f%%',\n",
    "                   pctdistance = 0.7,\n",
    "                   colors = color_list,\n",
    "                   shadow = True\n",
    "                           )\n",
    "\n",
    "plt.title('Deportes con atletas más altos', y=1.1) \n",
    "plt.axis('equal')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "filterSports['Height'].plot(kind='bar')\n",
    "plt.title('Altura atletas en Deportes')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusión\n",
    "A través de un diagrama de pastel podemos observar que\n",
    "el deporte en donde los atletas son más altos es **Basketball**, después **Natación** y **Tennis**."
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Pregunta de investigacion 3: \n",
    "### ¿Hay una relación entre la altura y el peso de los atletas de Basketball?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "plt.figure(figsize=(15,8))\n",
    "sns.scatterplot(x = 'Height',\n",
    "                y = 'Weight',\n",
    "                data = df.loc[df['Sport'] == 'Basketball'],\n",
    "                 color = 'purple',\n",
    "               )\n",
    "                             \n",
    "                             \n",
    "sns.set(rc = {'figure.figsize': (7,5)})\n",
    "\n",
    "plt.title('Height vs Weight Atletas Basketball')\n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "## Conclusión\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.12"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 4
}
